
	include "nesdefs.dasm"

;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0
        
Ptr		.word	; use for temp pointer storage
Speed		.byte   ; vertical speed of character
Scroll		.byte   ; horizontal scroll
PPUCtrlSt	.byte	; PPU Control state
PauseBit	.byte	; Pause status
Player_x	.byte	; Player x
Player_y	.byte	; Player y
player_dir	.byte	; Player direction
player_spd	.byte	; Player speed
CounterAnim	.byte	; Animation counter
Legs		.byte	; Legs animation frame
CounterPs	.byte	; Counter to prevent pausing too frequently
Msg_x		.byte	; Message x position
Msg_y		.byte	; Message y position
Msg_flag	.byte	; Message flag
Msg_counter	.byte	; Message timing counter
ScoreDig1	.byte	; Player score digit 1
ScoreDig2	.byte	; Player score digit 2
Life		.byte	; Player lives
Cur_enemy	.byte	; Current enemy flag
Enemy_x		.byte	; Enemy x
Enemy_y		.byte	; Enemy y
Enemy_vels	.byte	; Enemy x velocity
New		.byte	; New Game flag
NewTimer	.byte	; New Game timer

     

;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,2,1,1 ; mapper 0, 2 PRGs, 1 CHR, vert mirror

;;;;; START OF CODE

Start:
; wait for PPU warmup; clear CPU RAM
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
        
        lda #0
        sta PPU_ADDR
        sta PPU_ADDR	; PPU addr = $0000
        
        lda #255
        sta Scroll	; store scroll counter
        
        lda #$00
        sta ScoreDig1
        sta ScoreDig2
        
        lda #$03
        sta Life
        
        lda #$00
        sta Msg_flag
        
        lda #112
        sta Msg_x
        
       	lda #207
        sta Msg_y
        
        lda #$01
        sta Cur_enemy
        
        lda #$ff
        sta Enemy_x
        
        lda #164
        sta Enemy_y
        
        lda #$01
        sta Enemy_vels
        
        lda #$40
        sta NewTimer
        
        lda #$40
        sta Msg_counter
        
        
; set palette
	lda #$3f	; $3F -> A register
        sta PPU_ADDR	; write high byte first
	lda #$00	; $00 -> A register
        sta PPU_ADDR    ; $3F00 -> PPU address
.load_pal:        
        lda Palette,X
        sta PPU_DATA
        inx
        cpx #$20
        bne .load_pal
        
        jsr DrawBG
        
        lda #184
        sta Player_y
        lda #40
        sta Player_x
        
; activate PPU graphics
        lda #%00011110
        sta PPU_MASK	; enable rendering
        lda #%10010000
        sta PPU_CTRL	; enable NMI
        sta PPUCtrlSt
        
        lda #$01
        sta PauseBit
        lda #$01
        sta Msg_flag
        
        
.endless
	;;;;;;; CHECK FOR LIFE == 0
	jmp .endless	; endless loop
        
gameOver:
	lda #$01
        sta PauseBit
        lda #$03
        sta Msg_flag
.gOverLoop:
	jsr ReadJoypad0
        and #$10
        cmp #$10
        bne .gOverLoop
        jmp Start
        
draw_sprite0:
	;;;;;;;;;;;;;TODO DRAW SPRITE 0 from 2a
        lda #20
        sta $0200
        lda #$2a
        sta $0201
        lda #$20
        sta $0202
        lda #$f1
        sta $0203
	rts
        
draw_player:
	inc CounterAnim
	lda CounterAnim
        cmp #12
        bne set_sprites
        lda #$00
        sta CounterAnim
        lda Legs
        eor #$01
        sta Legs
        	
set_sprites:        
	lda #$01
        sta $0205
        lda #$02
        sta $0209
        
        lda Legs
        cmp #$01
        bne draw_legs2
draw_legs1:        
        lda #$03
        sta $020d
        lda #$04
        sta $0211
        jmp set_charpal
        
draw_legs2:        
        lda #$05
        sta $020d
        lda #$06
        sta $0211
set_charpal:        
; set palette for character sprite
	lda #$00
        sta $0206
        sta $020a
        sta $020e
        sta $0212
        
; set x and y pos for character sprite
	lda Player_y
        sta $0204
        lda Player_x
        sta $0207
        
        lda Player_x
        clc
        adc #$08
        sta $020b
        lda Player_y
        sta $0208
        
        lda Player_y
        clc
        adc #$08
        sta $020c
        lda Player_x
        sta $020f
        
        lda Player_y
        clc
        adc #$08
        sta $0210
        lda Player_x
        clc
        adc #$08
        sta $0213
        rts
        
update_player:
	ldx PauseBit
        cpx #$01
        beq end_update_pl
	pha
        and #%00000001
        cmp #%00000001
        bne check_up
        lda Player_y
        cmp #184
        beq check_up
        lda #184
        sta Player_y
check_up:        
        pla
        and #%00000010
        cmp #%00000010
        bne end_update_pl
        lda Player_y
        cmp #164
        beq end_update_pl
        lda #164
        sta Player_y        
end_update_pl:        
        rts
        
draw_msg:
	;Clear msg sprites
        lda #$00
        sta $0231
        sta $0235
        sta $0239
        sta $023d
        sta $0241
        sta $0245
        sta $0249
        sta $024d
        
	lda Msg_flag
        cmp #$00
        bne msg2
        ; Set message: GO!!
        lda #$14
        sta $0231
        lda #$19
        sta $0235
        lda #$0d
        sta $0239
        sta $023d
        
        lda Msg_y
        sta $0230
        sta $0234
        sta $0238
        sta $023c
        
        lda Msg_x
        sta $0233
        clc
        adc #$08
        sta $0237
        clc 
        adc #$08
        sta $023b
        clc
        adc #$08
        sta $023f
        
        lda #$03
        sta $0232
        sta $0236
        sta $023a
        sta $023e
        jmp endMsg
        
msg2:
	cmp #$01
        bne msg3
        ; PAUSE
        lda #$1a
        sta $0231
        lda #$10
        sta $0235
        lda #$1e
        sta $0239
        lda #$1c
        sta $023d
        lda #$12
        sta $0241
        
        lda Msg_y
        sta $0230
        sta $0234
        sta $0238
        sta $023c
        sta $0240
        
        lda Msg_x
        sta $0233
        clc
        adc #$08
        sta $0237
        clc 
        adc #$08
        sta $023b
        clc
        adc #$08
        sta $023f
        clc
        adc #$08
        sta $0243
        
        lda #$03
        sta $0232
        sta $0236
        sta $023a
        sta $023e
        sta $0242
        jmp endMsg
        
msg3:	
	cmp #$02
        bne msg4
        ; OUCH!!
        lda #$19
        sta $0231
        lda #$1e
        sta $0235
        lda #$11
        sta $0239
        lda #$15
        sta $023d
        lda #$0d
        sta $0241
        
        lda Msg_y
        sta $0230
        sta $0234
        sta $0238
        sta $023c
        sta $0240
        
        lda Msg_x
        sta $0233
        clc
        adc #$08
        sta $0237
        clc 
        adc #$08
        sta $023b
        clc
        adc #$08
        sta $023f
        clc
        adc #$08
        sta $0243
        
        lda #$03
        sta $0232
        sta $0236
        sta $023a
        sta $023e
        sta $0242
        
        dec Msg_counter
        lda Msg_counter
        cmp #$00
        bne gotoEndMsg
        lda #$40
        sta Msg_counter
        lda #$00
        sta Msg_flag
        jmp endMsg
        
msg4:	
	cmp #$03
        bne gotoEndMsg
        ; GAME OVER
        lda #$14
        sta $0231
        lda #$10
        sta $0235
        lda #$17
        sta $0239
        lda #$12
        sta $023d
        lda #$19
        sta $0241
        lda #$1f
        sta $0245
        lda #$12
        sta $0249
        lda #$1b
        sta $024d
        
        lda Msg_y
        sta $0230
        sta $0234
        sta $0238
        sta $023c
        clc
        adc #$08
        sta $0240
        sta $0244
        sta $0248
        sta $024c
        jmp gOverX
        
gotoEndMsg:
	jmp endMsg
gOverX:        
        lda Msg_x
        sta $0233
        sta $0243
        clc
        adc #$08
        sta $0237
        sta $0247
        clc 
        adc #$08
        sta $023b
        sta $024b
        clc
        adc #$08
        sta $023f
        sta $024f
        
        lda #$03
        sta $0232
        sta $0236
        sta $023a
        sta $023e
        sta $0242
        sta $0246
        sta $024a
        sta $024e
        
        dec Msg_counter
        lda Msg_counter
        cmp #$40
        bne gotoEndMsg
        lda #$00
        sta Msg_flag
        
endMsg:
	rts
        
draw_score:
	lda ScoreDig1
        clc
        adc #$20
        sta $0215
        lda ScoreDig2
        clc
        adc #$20
        sta $0219
        
        lda #16		; Score y
        sta $0214
        sta $0218
        
        lda #60		; Score x
        sta $0217
        clc
        adc #$08
        sta $021b
        
        lda #$03
        sta $0216
        sta $021a
        rts

draw_life:
	lda #$00
        sta $021d
        sta $0221
        sta $0225

	lda Life
        cmp #$00
        beq endDL
        lda #$2b
        sta $021d
        lda Life
        cmp #$01
        beq endDL
        lda #$2b
        sta $0221
        lda Life
        cmp #$02
        beq endDL
        lda #$2b
        sta $0225
        
        
endDL:
	lda #16		; Life y
        sta $021c
        sta $0220
        sta $0224
        
        lda #180	; Life x
        sta $021f
        clc
        adc #$08
        sta $0223
        clc
        adc #$08
        sta $0227
        
        lda #$03
        sta $021e
        sta $0222
        sta $0226
        rts
        
inc_score:
	lda ScoreDig2
        cmp #$09
        beq tens
        inc ScoreDig2
        jmp endScore     
tens:
	lda #$00
        sta ScoreDig2
        lda ScoreDig1
        cmp #$09
        beq resetSc
        inc ScoreDig1
        jmp endScore
resetSc:
	lda #$00
        sta ScoreDig1
endScore:
	rts
        
process_enemy:
	inc Player_x
        inc Player_x
        inc Player_x
        inc Player_x
        inc Player_x
        inc Player_x
        inc Player_x
        inc Player_x
        
        lda PauseBit
        cmp #$01
        beq endPrcEn
        
        lda NewTimer
        cmp #$00
        beq proEnem
        dec NewTimer
        jmp endPrcEn
        
proEnem:        
	lda Cur_enemy
        and #$01
        beq spawn
        ldx Enemy_vels
velsLoop:        
        dex
        dec Enemy_x
        lda Enemy_x
        cmp #$00
        beq despawn
        cmp Player_x
        beq maybe_hurt_player
after_hurt:
        cpx #$00
        bne velsLoop
        jmp endPrcEn
        
despawn:
	lda #$00
        sta Cur_enemy
        jmp endPrcEn
        
maybe_hurt_player:
	jsr inc_score
	lda Enemy_y
        cmp Player_y
        beq hurt_player
        jmp after_hurt
        
spawn:
	inc Cur_enemy
        lda ScoreDig1
        clc
        adc #$01
        ;lda #$03
        sta Enemy_vels
        lda #$ff
        sta Enemy_x
        lda ScoreDig2
        jsr NextRandom	; Generate random num
        and #$01
        beq setY2
setY1:	
	lda #164
        sta Enemy_y
        jmp endPrcEn
setY2:	
	lda #184
        sta Enemy_y
        
endPrcEn:
	dec Player_x
        dec Player_x
        dec Player_x
        dec Player_x
        dec Player_x
        dec Player_x
        dec Player_x
        dec Player_x
	rts
hurt_player:
	dec Life
        lda #$02
        sta Msg_flag
        jmp after_hurt
        
draw_enemy:
	lda #$00
        sta $0251
        sta $0255
        sta $0259
        sta $025d
	lda Cur_enemy
        cmp #$00
        beq endDE
        lda #$09
        sta $0251
        lda #$0a
        sta $0255
        lda #$0b
        sta $0259
        lda #$0c
        sta $025d
        
        lda Enemy_y
        sta $0250
        sta $0254
        clc 
        adc #$08
        sta $0258
        sta $025c
        
        lda Enemy_x
        sta $0253
        sta $025b
        clc
        adc #$08
        sta $0257
        sta $025f
        
        lda #$02
        sta $0252
        sta $0256
        sta $025a
        sta $025e
endDE:
	rts
        
        

;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"
        include "background.dasm"

;;;;; INTERRUPT HANDLERS

NMIHandler:
	SAVE_REGS
	lda #$00
        sta OAM_ADDR
        lda #$02
        sta OAM_DMA
        lda #$00
        
        lda #$00
        sta PPU_SCROLL
        sta PPU_SCROLL
        
        lda CounterPs
       	cmp #$10
        beq read_pad
        inc CounterPs
        
read_pad:        
        jsr ReadJoypad0
        pha
        and #$10
        cmp #$10
        bne read_jmp
        lda CounterPs
        cmp #$10
        bne read_jmp
        lda PauseBit
        eor #$01
        sta PauseBit
        sta Msg_flag
        lda #$00
        sta CounterPs
read_jmp:        
        pla
        jsr update_player
        
        jsr draw_player
        jsr draw_sprite0
        jsr draw_score
        jsr draw_life
        jsr draw_msg
        jsr process_enemy
        jsr draw_enemy
        
        lda Life
        cmp #$00
        bne .wait0
        jsr gameOver
        
        ; Prevent scrolling for score and life bars
.wait0	bit PPU_STATUS
        bvs .wait0
.wait1	bit PPU_STATUS
        bvc .wait1
        
        lda Scroll
        cmp #255
        bne set_scroll_pos
        
        lda PPUCtrlSt
        eor #%00000001
        sta PPUCtrlSt
        sta PPU_CTRL
        lda #$0
        sta Scroll
        

set_scroll_pos:
	lda Scroll
        sta PPU_SCROLL
	lda #$00
        sta PPU_SCROLL

	lda PauseBit
        cmp #$00
        bne prevent_scroll
        
        inc Scroll
        lda Scroll
        
        sta PPU_SCROLL
        lda #$00
        sta PPU_SCROLL
prevent_scroll:
	RESTORE_REGS
	rti
        
;;;;; CONSTANT DATA
        
Palette:
	hex 22271720	; Palette 1
        hex 22061719	; Palette 2
        hex 22192a3b	; Palette 3
        hex 22222222	; Palette 4 placeholder
        hex 22102d00	; Sprite 1
        hex 22112131	; Sprite 2
        hex 2219092a	; Sprite 3
        hex 22221520	; Sprite 4


;;;;; CPU VECTORS

	NES_VECTORS
        
;;;;; CHAR SETS
	
        org $10000
        incbin "runner.chr"
        incbin "runner.chr"

